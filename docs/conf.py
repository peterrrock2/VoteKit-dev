# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

import os
import sys

try:
    import mock
except ImportError:
    import unittest.mock as mock

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

# autodoc needs to find our code.
sys.path.insert(0, os.path.abspath("../"))

# -- Project information -----------------------------------------------------

project = "VoteKit"
copyright = "2024, Metric Geometry and Gerrymandering Group"
author = "Metric Geometry and Gerrymandering Group"

# The short X.Y version
version = ""
# The full version, including alpha/beta/rc tags
release = ""

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.viewcode",
    "sphinx.ext.intersphinx",
    "sphinx_copybutton",
    "recommonmark",
]

intersphinx_mapping = {
    # "python": ("https://docs.python.org/3", None),
    # "pandas": ("http://pandas.pydata.org/pandas-docs/stable/", None),
    # "geopandas": ("http://geopandas.org/", None),
    # "networkx": ("https://networkx.github.io/", None),
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = {
    ".rst": "restructuredtext",
    ".md": "markdown",
}

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {"style_nav_header_background": "#0099cd"}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}
html_css_files = [
    "css/custom.css",
]


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "VoteKitdoc"


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "votekit", "VoteKit Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "VoteKit",
        "VoteKit Documentation",
        author,
        "VoteKit",
        "One line description of project.",
        "Miscellaneous",
    )
]

# Autodoc config.

# Append the __init__ string of a class to the class docstring.
autoclass_content = "both"

autodoc_default_flags = ["members"]

# -- Mock C libraries --------------------------------------------------------

# RTD is unable to install libraries with C dependencies.
# We're using the mock module to mock those away.

MOCK_MODULES = [
    "numpy",
    "pandas",
    "geopandas",
    "matplotlib",
    "matplotlib.pyplot",
    # "networkx",
    # "networkx.readwrite",
    # "networkx.algorithms",
    # "networkx.algorithms.shortest_paths",
    # "networkx.algorithms.shortest_paths.weighted",
    "shapely",
    "shapely.ops",
    "shapely.strtree",
    "shapely.prep",
    "shapely.prepared",
    "shapely.validation",
]

for module in MOCK_MODULES:
    sys.modules[module] = mock.Mock()

# -- Extension configuration -------------------------------------------------

# Prepend the module name of classes.
add_module_names = True
autodoc_inherit_docstrings = False
